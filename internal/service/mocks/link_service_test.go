// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "shortener-link/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LinkService is an autogenerated mock type for the LinkService type
type LinkService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, link
func (_m *LinkService) Create(ctx context.Context, link string) (string, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpiredShortenerLink provides a mock function with given fields: ctx
func (_m *LinkService) DeleteExpiredShortenerLink(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredShortenerLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredShortenerLinks provides a mock function with given fields: ctx, interval
func (_m *LinkService) DeleteExpiredShortenerLinks(ctx context.Context, interval time.Duration) error {
	ret := _m.Called(ctx, interval)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredShortenerLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, interval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShortenerLink provides a mock function with given fields: ctx, shortenerLink
func (_m *LinkService) DeleteShortenerLink(ctx context.Context, shortenerLink string) error {
	ret := _m.Called(ctx, shortenerLink)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortenerLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortenerLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *LinkService) GetAll(ctx context.Context) ([]models.Link, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Link, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Link); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByShortenerLink provides a mock function with given fields: ctx, shortenerLink
func (_m *LinkService) GetByShortenerLink(ctx context.Context, shortenerLink string) (string, error) {
	ret := _m.Called(ctx, shortenerLink)

	if len(ret) == 0 {
		panic("no return value specified for GetByShortenerLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortenerLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortenerLink)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortenerLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatsByShortenerLink provides a mock function with given fields: ctx, shortenerLink
func (_m *LinkService) GetStatsByShortenerLink(ctx context.Context, shortenerLink string) (int, time.Time, error) {
	ret := _m.Called(ctx, shortenerLink)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsByShortenerLink")
	}

	var r0 int
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, time.Time, error)); ok {
		return rf(ctx, shortenerLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, shortenerLink)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = rf(ctx, shortenerLink)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, shortenerLink)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewLinkService creates a new instance of LinkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkService {
	mock := &LinkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
